; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc --filetype=asm --mcpu=cheriot --mtriple=riscv32-unknown-unknown -target-abi cheriot  -mattr=+xcheri,+cap-mode -o - -verify-machineinstrs < %s | FileCheck %s
target datalayout = "e-m:e-pf200:64:64:64:32-p:32:32-i64:64-n32-S128-A200-P200-G200"
target triple = "riscv32-unknown-unknown"

; Function Attrs: minsize nounwind optsize
define dso_local chericcallcce i32 @_Z2swi(i32 noundef %v) local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: _Z2swi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a0, a0, -1
; CHECK-NEXT:    li a1, 8
; CHECK-NEXT:    bltu a1, a0, .LBB0_3
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    cincoffset csp, csp, -16
; CHECK-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; CHECK-NEXT:    slli a0, a0, 2
; CHECK-NEXT:  .LBB0_14: # %entry
; CHECK-NEXT:    # Label of block must be emitted
; CHECK-NEXT:    auipcc ca1, %cheriot_compartment_hi(.LJTI0_0)
; CHECK-NEXT:    cincoffset ca1, ca1, %cheriot_compartment_lo_i(.LBB0_14)
; CHECK-NEXT:    cincoffset ca0, ca1, a0
; CHECK-NEXT:    clw a0, 0(ca0)
; CHECK-NEXT:  .LBB0_15: # %entry
; CHECK-NEXT:    # Label of block must be emitted
; CHECK-NEXT:    auipcc ca1, %cheriot_compartment_hi(.L_Z2swi$jump_table_base)
; CHECK-NEXT:    cincoffset ca1, ca1, %cheriot_compartment_lo_i(.LBB0_15)
; CHECK-NEXT:    cincoffset ca0, ca1, a0
; CHECK-NEXT:    cjr ca0
; CHECK-NEXT:  .LBB0_2: # %sw.bb
; CHECK-NEXT:    ccall a
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_3:
; CHECK-NEXT:    li a0, 12
; CHECK-NEXT:    j .LBB0_13
; CHECK-NEXT:  .LBB0_4: # %sw.bb1
; CHECK-NEXT:    ccall b
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_5: # %sw.bb4
; CHECK-NEXT:    ccall c
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_6: # %sw.bb7
; CHECK-NEXT:    ccall d
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_7: # %sw.bb10
; CHECK-NEXT:    ccall e
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_8: # %sw.bb13
; CHECK-NEXT:    ccall f
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_9: # %sw.bb16
; CHECK-NEXT:    ccall g
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_10: # %sw.bb19
; CHECK-NEXT:    ccall h
; CHECK-NEXT:    j .LBB0_12
; CHECK-NEXT:  .LBB0_11: # %sw.bb22
; CHECK-NEXT:    ccall i
; CHECK-NEXT:  .LBB0_12:
; CHECK-NEXT:    addi a0, a0, 12
; CHECK-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; CHECK-NEXT:    cincoffset csp, csp, 16
; CHECK-NEXT:  .LBB0_13: # %sw.epilog
; CHECK-NEXT:    slli a0, a0, 1
; CHECK-NEXT:    li a1, 0
; CHECK-NEXT:    cret
entry:
  switch i32 %v, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb4
    i32 4, label %sw.bb7
    i32 5, label %sw.bb10
    i32 6, label %sw.bb13
    i32 7, label %sw.bb16
    i32 8, label %sw.bb19
    i32 9, label %sw.bb22
  ]

sw.bb:                                            ; preds = %entry
  %call = tail call i32 @a() #2
  %add = add nsw i32 %call, 12
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %call2 = tail call i32 @b() #2
  %add3 = add nsw i32 %call2, 12
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %call5 = tail call i32 @c() #2
  %add6 = add nsw i32 %call5, 12
  br label %sw.epilog

sw.bb7:                                           ; preds = %entry
  %call8 = tail call i32 @d() #2
  %add9 = add nsw i32 %call8, 12
  br label %sw.epilog

sw.bb10:                                          ; preds = %entry
  %call11 = tail call i32 @e() #2
  %add12 = add nsw i32 %call11, 12
  br label %sw.epilog

sw.bb13:                                          ; preds = %entry
  %call14 = tail call i32 @f() #2
  %add15 = add nsw i32 %call14, 12
  br label %sw.epilog

sw.bb16:                                          ; preds = %entry
  %call17 = tail call i32 @g() #2
  %add18 = add nsw i32 %call17, 12
  br label %sw.epilog

sw.bb19:                                          ; preds = %entry
  %call20 = tail call i32 @h() #2
  %add21 = add nsw i32 %call20, 12
  br label %sw.epilog

sw.bb22:                                          ; preds = %entry
  %call23 = tail call i32 @i() #2
  %add24 = add nsw i32 %call23, 12
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb22, %sw.bb19, %sw.bb16, %sw.bb13, %sw.bb10, %sw.bb7, %sw.bb4, %sw.bb1, %sw.bb
  %ret.0 = phi i32 [ 12, %entry ], [ %add24, %sw.bb22 ], [ %add21, %sw.bb19 ], [ %add18, %sw.bb16 ], [ %add15, %sw.bb13 ], [ %add12, %sw.bb10 ], [ %add9, %sw.bb7 ], [ %add6, %sw.bb4 ], [ %add3, %sw.bb1 ], [ %add, %sw.bb ]
  %mul = shl nsw i32 %ret.0, 1
  ret i32 %mul
}

; Function Attrs: minsize optsize
declare dso_local i32 @a() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @b() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @c() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @d() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @e() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @f() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @g() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @h() local_unnamed_addr addrspace(200) #1

; Function Attrs: minsize optsize
declare dso_local i32 @i() local_unnamed_addr addrspace(200) #1

attributes #0 = { minsize nounwind optsize "cheri-compartment"="TCPIP" "interrupt-state"="enabled" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="cheriot" "target-features"="+32bit,+c,+e,+m,+relax,+xcheri,-a,-d,-experimental-smaia,-experimental-ssaia,-experimental-zacas,-experimental-zfa,-experimental-zfbfmin,-experimental-zicond,-experimental-zihintntl,-experimental-ztso,-experimental-zvbb,-experimental-zvbc,-experimental-zvfbfmin,-experimental-zvfbfwma,-experimental-zvkg,-experimental-zvkn,-experimental-zvknc,-experimental-zvkned,-experimental-zvkng,-experimental-zvknha,-experimental-zvknhb,-experimental-zvks,-experimental-zvksc,-experimental-zvksed,-experimental-zvksg,-experimental-zvksh,-experimental-zvkt,-f,-h,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xcvbitmanip,-xcvmac,-xsfcie,-xsfvcp,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmp,-zcmt,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicntr,-zicsr,-zifencei,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { minsize optsize "cheri-compartment"="TCPIP" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="cheriot" "target-features"="+32bit,+c,+e,+m,+relax,+xcheri,-a,-d,-experimental-smaia,-experimental-ssaia,-experimental-zacas,-experimental-zfa,-experimental-zfbfmin,-experimental-zicond,-experimental-zihintntl,-experimental-ztso,-experimental-zvbb,-experimental-zvbc,-experimental-zvfbfmin,-experimental-zvfbfwma,-experimental-zvkg,-experimental-zvkn,-experimental-zvknc,-experimental-zvkned,-experimental-zvkng,-experimental-zvknha,-experimental-zvknhb,-experimental-zvks,-experimental-zvksc,-experimental-zvksed,-experimental-zvksg,-experimental-zvksh,-experimental-zvkt,-f,-h,-save-restore,-svinval,-svnapot,-svpbmt,-v,-xcvbitmanip,-xcvmac,-xsfcie,-xsfvcp,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmp,-zcmt,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zicntr,-zicsr,-zifencei,-zihintpause,-zihpm,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #2 = { minsize nounwind optsize }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"cheriot"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"clang version 17.0.0 (https://github.com/sleffler/llvm-project/ d65c7083db4a52a007ea6692b66d7f70b0fa3d70)"}
